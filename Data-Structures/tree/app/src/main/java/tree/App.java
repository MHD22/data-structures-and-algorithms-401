/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree;

import k_aryTree.FizzBuzzTree;
import k_aryTree.K_aryTree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
//        K_aryTree<Integer> ktree = new K_aryTree<>(4);
//        ktree.add(1);
//        ktree.add(2);
//        ktree.add(3);
//        ktree.add(4);
//        ktree.add(5);
//        ktree.add(6);
//        ktree.add(7);
//        ktree.add(8);
//        ktree.add(9);
//        ktree.add(15);
//        ktree.add(20);
//        System.out.println(ktree);
//        System.out.println(ktree.breadthFirstSearch());
//        K_aryTree<String> fizBuzzTree = FizzBuzzTree.fizzBuzzTree(ktree);
//        System.out.println("-----------------");
//        System.out.println("-----------------");
//        System.out.println("-----------------");
//        System.out.println(fizBuzzTree.breadthFirstSearch());
//        System.out.println("-----------------");
//        System.out.println("-----------------");
//        System.out.println("-----------------");



        BinaryTree<Integer> tree = new BinaryTree<>();
        tree.add(1);
        tree.add(2);
        tree.add(3);



        BinaryTree<Integer> tree2 = new BinaryTree<>();
        tree2.add(1);
        tree2.add(4);
        tree2.add(3);




        System.out.println(tree.breadthFirstSearch());
        System.out.println(tree2.breadthFirstSearch());
        System.out.println(tree.findFilesInDirectory(tree.root));
        System.out.println(tree2.findFilesInDirectory(tree2.root));
        System.out.println(tree.compareFilesInTwoDirectories(tree, tree2));


        //BST
//        BinarySearchTree<Integer> tr = new BinarySearchTree<>();
//        tr.add(10);
//        tr.add(5);
//        tr.add(7);
//        tr.add(8);
//        tr.add(15);
//        System.out.println(tr);
//        System.out.println(tr.contains(5));
//        System.out.println(tr.preOrder(tr.root));
//        System.out.println(tr.inOrder(tr.root));
//        System.out.println(tr.postOrder(tr.root));
//        System.out.println(tr.contains(5));
//        System.out.println(tr.contains(6));
//        System.out.println(tr.contains(7));



    }
}
