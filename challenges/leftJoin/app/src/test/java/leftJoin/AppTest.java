/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leftJoin;

import hashtable.Hashtable;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testLeftJoinInNormalCase() {
        Hashtable hash1 = new Hashtable();
        Hashtable hash2 = new Hashtable();

        hash1.add("found","enamored");
        hash1.add("wrath","anger");
        hash1.add("diligent","employed");
        hash1.add("outift","guard");
        hash1.add("guide","usher");

        hash2.add("found","averse");
        hash2.add("wrath","delight");
        hash2.add("diligent","idle");
        hash2.add("flow","jam");
        hash2.add("guide","follow");
        String[][] entries = {{"found","enamored","averse"},{"guide","usher","follow"}, {"outift", "guard", null}, {"wrath", "anger", "delight"}, {"diligent", "employed", "idle"}};
        List<List<String>> entries2 = Arrays.stream(entries).map(e-> Arrays.stream(e).collect(Collectors.toList())).collect(Collectors.toList());
        assertArrayEquals(entries2.toArray(),hash1.leftJoin(hash2).toArray());
    }

    @Test public void testLeftJoinWithSecondHashtableIsEmpty() {
        Hashtable hash1 = new Hashtable();
        Hashtable hash2 = new Hashtable();

        hash1.add("found","enamored");
        hash1.add("wrath","anger");
        hash1.add("diligent","employed");
        hash1.add("outift","guard");
        hash1.add("guide","usher");


        String[][] entries = {{"found","enamored",null},{"guide","usher",null}, {"outift", "guard", null}, {"wrath", "anger", null}, {"diligent", "employed", null}};
        List<List<String>> entries2 = Arrays.stream(entries).map(e-> Arrays.stream(e).collect(Collectors.toList())).collect(Collectors.toList());
        assertArrayEquals(entries2.toArray(),hash1.leftJoin(hash2).toArray());
    }

    @Test public void testLeftJoinWithFirstHashMapIsEmpty() {
        Hashtable hash1 = new Hashtable();
        Hashtable hash2 = new Hashtable();



        hash2.add("found","averse");
        hash2.add("wrath","delight");
        hash2.add("diligent","idle");
        hash2.add("flow","jam");
        hash2.add("guide","follow");
//        String[][] entries = {{}};
        List<List<String>> entries2 = new ArrayList<>();
        assertArrayEquals(entries2.toArray(),hash1.leftJoin(hash2).toArray());
    }

    @Test public void testLeftJoinWithNoCommonKeys() {
        Hashtable hash1 = new Hashtable();
        Hashtable hash2 = new Hashtable();

        hash1.add("found","enamored");
        hash1.add("wrath","anger");
        hash1.add("diligent","employed");
        hash1.add("outift","guard");
        hash1.add("guide","usher");

        hash2.add("hello","averse");
        hash2.add("who","delight");
        hash2.add("are","idle");

        String[][] entries = {{"found","enamored",null},{"guide","usher",null}, {"outift", "guard", null}, {"wrath", "anger", null}, {"diligent", "employed", null}};
        List<List<String>> entries2 = Arrays.stream(entries).map(e-> Arrays.stream(e).collect(Collectors.toList())).collect(Collectors.toList());
        assertArrayEquals(entries2.toArray(),hash1.leftJoin(hash2).toArray());
    }
}
